import { SuiClient } from "@mysten/sui/client";
import { Transaction, TransactionObjectInput, TransactionResult } from "@mysten/sui/transactions";
import { SuiPriceServiceConnection, SuiPythClient } from "@pythnetwork/pyth-sui-js";
import { FeeReceivers, LendingMarket, ObligationOwnerCap } from "./_generated/suilend/lending-market/structs";
import { Obligation } from "./_generated/suilend/obligation/structs";
import { NewConfigArgs as CreateRateLimiterConfigArgs } from "./_generated/suilend/rate-limiter/functions";
import { CreateReserveConfigArgs } from "./_generated/suilend/reserve-config/functions";
import { Side } from "./lib/types";
export declare const ADMIN_ADDRESS: string;
export declare const LENDING_MARKET_REGISTRY_ID: string;
type UiLendingMarket = {
    name: string;
    slug: string;
    id: string;
    type: string;
    ownerCapId: string;
    isHidden?: boolean;
};
export declare const LENDING_MARKETS: UiLendingMarket[];
export declare const LENDING_MARKET_ID: string;
export declare const LENDING_MARKET_TYPE: string;
export type ClaimRewardsReward = {
    reserveArrayIndex: bigint;
    rewardIndex: bigint;
    rewardCoinType: string;
    side: Side;
};
export declare class SuilendClient {
    lendingMarket: LendingMarket<string>;
    client: SuiClient;
    pythClient: SuiPythClient;
    pythConnection: SuiPriceServiceConnection;
    constructor(lendingMarket: LendingMarket<string>, client: SuiClient);
    static initialize(lendingMarketId: string, lendingMarketType: string, client: SuiClient): Promise<SuilendClient>;
    static getFeeReceivers(client: SuiClient, lendingMarketId: string): Promise<FeeReceivers>;
    static createNewLendingMarket(registryId: string, lendingMarketType: string, transaction: Transaction): {
        $kind: "NestedResult";
        NestedResult: [number, number];
    };
    static getObligationOwnerCaps(ownerId: string, lendingMarketTypeArgs: string[], client: SuiClient): Promise<ObligationOwnerCap<string>[]>;
    static getObligation(obligationId: string, lendingMarketTypeArgs: string[], client: SuiClient): Promise<Obligation<string>>;
    getObligation(obligationId: string): Promise<Obligation<string>>;
    static getLendingMarketOwnerCapId(ownerId: string, lendingMarketTypeArgs: string[], client: SuiClient): Promise<string | undefined>;
    getLendingMarketOwnerCapId(ownerId: string): Promise<string | undefined>;
    createReserve(lendingMarketOwnerCapId: string, transaction: Transaction, pythPriceId: string, coinType: string, createReserveConfigArgs: CreateReserveConfigArgs): Promise<TransactionResult>;
    addReward(ownerId: string, lendingMarketOwnerCapId: string, reserveArrayIndex: bigint, isDepositReward: boolean, rewardCoinType: string, rewardValue: string, startTimeMs: bigint, endTimeMs: bigint, transaction: Transaction, mergeCoins?: boolean): Promise<TransactionResult>;
    cancelReward(lendingMarketOwnerCapId: string, reserveArrayIndex: bigint, isDepositReward: boolean, rewardIndex: bigint, rewardCoinType: string, transaction: Transaction): TransactionResult;
    closeReward(lendingMarketOwnerCapId: string, reserveArrayIndex: bigint, isDepositReward: boolean, rewardIndex: bigint, rewardCoinType: string, transaction: Transaction): TransactionResult;
    claimReward(obligationOwnerCapId: string, reserveArrayIndex: bigint, rewardIndex: bigint, rewardType: string, side: Side, transaction: Transaction, packageOveride?: string): TransactionResult;
    claimRewardAndDeposit(obligationId: string, rewardReserveArrayIndex: bigint, rewardIndex: bigint, rewardType: string, side: Side, depositReserveArrayIndex: bigint, transaction: Transaction): TransactionResult;
    claimRewards(ownerId: string, obligationOwnerCapId: string, rewards: ClaimRewardsReward[], transaction: Transaction, isDepositing: boolean): void;
    claimRewardsAndSendToUser(ownerId: string, obligationOwnerCapId: string, rewards: ClaimRewardsReward[], transaction: Transaction): void;
    claimRewardsAndDeposit(ownerId: string, obligationOwnerCapId: string, rewards: ClaimRewardsReward[], transaction: Transaction): void;
    findReserveArrayIndex(coinType: string): bigint;
    updateReserveConfig(lendingMarketOwnerCapId: string, transaction: Transaction, coinType: string, createReserveConfigArgs: CreateReserveConfigArgs): TransactionResult;
    newObligationOwnerCap(transaction: Transaction, lendingMarketOwnerCapId: string, destinationAddress: string, obligationId: string): void;
    updateRateLimiterConfig(lendingMarketOwnerCapId: string, transaction: Transaction, newRateLimiterConfigArgs: CreateRateLimiterConfigArgs): TransactionResult;
    changeReservePriceFeed(lendingMarketOwnerCapId: string, coinType: string, pythPriceId: string, transaction: Transaction): Promise<TransactionResult>;
    createObligation(transaction: Transaction): TransactionResult;
    refreshAll(transaction: Transaction, obligation: Obligation<string>, extraReserveArrayIndex?: bigint, packageOveride?: string): Promise<void>;
    refreshReservePrices(transaction: Transaction, priceInfoObjectId: string, reserveArrayIndex: bigint, packageOveride?: string): Promise<void>;
    deposit(sendCoin: TransactionObjectInput, coinType: string, obligationOwnerCap: TransactionObjectInput, transaction: Transaction, packageOveride?: string): void;
    depositIntoObligation(ownerId: string, coinType: string, value: string, transaction: Transaction, obligationOwnerCapId: string | TransactionResult): Promise<void>;
    depositLiquidityAndGetCTokens(ownerId: string, coinType: string, value: string, transaction: Transaction): Promise<void>;
    withdraw(obligationOwnerCapId: string, obligationId: string, coinType: string, value: string, transaction: Transaction, packageOveride?: string): Promise<TransactionResult>;
    redeem(ctokens: TransactionObjectInput, coinType: string, exemption: TransactionObjectInput, transaction: Transaction, packageOveride?: string): TransactionResult;
    withdrawAndSendToUser(ownerId: string, obligationOwnerCapId: string, obligationId: string, coinType: string, value: string, transaction: Transaction, packageOveride?: string): Promise<void>;
    borrow(obligationOwnerCapId: string, obligationId: string, coinType: string, value: string, transaction: Transaction): Promise<TransactionResult>;
    borrowAndSendToUser(ownerId: string, obligationOwnerCapId: string, obligationId: string, coinType: string, value: string, transaction: Transaction): Promise<void>;
    repay(obligationId: string, coinType: string, coin: TransactionObjectInput, transaction: Transaction): TransactionResult;
    repayIntoObligation(ownerId: string, obligationId: string, coinType: string, value: string, transaction: Transaction): Promise<TransactionResult>;
    liquidateAndRedeem(transaction: Transaction, obligation: Obligation<string>, repayCoinType: string, withdrawCoinType: string, repayCoinId: TransactionObjectInput): Promise<TransactionResult>;
    liquidate(transaction: Transaction, obligation: Obligation<string>, repayCoinType: string, withdrawCoinType: string, repayCoinId: TransactionObjectInput): Promise<TransactionResult>;
    migrate(transaction: Transaction, lendingMarketOwnerCapId: string): TransactionResult;
    claimFees(transaction: Transaction, coinType: string): TransactionResult;
    setFeeReceiversAndWeights(transaction: Transaction, lendingMarketOwnerCapId: string, receivers: string[], weights: bigint[]): TransactionResult;
    redeemCtokensAndWithdrawLiquidity(ownerId: string, ctokenCoinTypes: string[], transaction: Transaction): Promise<void>;
}
export {};
